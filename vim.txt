
" Plugins will be downloaded under the specified directory.
call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

if empty(glob('~/.vim/autoload/plug.vim'))
	        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
		                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
		        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC

endif
call plug#begin('~/.vim/plugged')

""""""""""""""""""""""""""""
"all languages support
Plug 'sheerun/vim-polyglot'
"""""""""""""""""""""""""""""
Plug 'tomlion/vim-solidity'

" Declare the list of plugins.
Plug 'tpope/vim-sensible'
Plug 'junegunn/seoul256.vim'
""""""""""""""""""""""""""""""
Plug 'ghifarit53/tokyonight-vim'

Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = ['coc-emmet', 'coc-css', 'coc-html', 'coc-json', 'coc-prettier', 'coc-tsserver']
"""""""""""""""""""""""""""""""""""adding typescript support 
  Plug 'leafgarland/typescript-vim'
  Plug 'peitalin/vim-jsx-typescript'
Plug 'folke/tokyonight.nvim', { 'branch': 'main' }

" List ends here. Plugins become visible to Vim after this call.
call plug#end()
"""""""""""""""""""""""""""""""""""""""""
if (has("termguicolors"))
	 set termguicolors
 endif

 " For Neovim 0.1.3 and 0.1.4
 let $NVIM_TUI_ENABLE_TRUE_COLOR=1

 """"" enable the theme

 syntax enable

 " To enable the lightline theme
 let g:lightline = { 'colorscheme': 'nightowl' }
"""""""""""""""""""""""""""""""""""""""""""""other configs
let g:netrw_winsize = 30
let g:newtrw_list_hide ='\(^\|\s\s)\zs\. \s\+'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set termguicolors
"""""""""""""""""""""""""""""""""""""""""""tokyonight 
let g:tokyonight_current_word = 'bold'
let g:tokyonight_style = 'night' " available: night, storm
let g:tokyonight_enable_italic = 1
let g:tokyonight_transparent_background = 1
colorscheme tokyonight
set number relativenumber 
""""""""some advanced vimscript
  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
    inoremap <silent><expr> <C-x><C-z> coc#pum#visible() ? coc#pum#stop() : "\<C-x>\<C-z>"
    " remap for complete to use tab and <cr>
    inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1):
        \ <SID>check_back_space() ? "\<Tab>" :
        \ coc#refresh()
    inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
    inoremap <silent><expr> <c-space> coc#refresh()
